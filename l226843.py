# -*- coding: utf-8 -*-
"""l226843.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yEd6HPGrvGHDFyi3VbdYF_2SrCN7yVyT
"""

#Question 1
import matplotlib.pyplot as plt
import numpy as np
group_A = [12, 15, 14, 13, 16, 18, 19, 15, 14, 20, 17, 14, 15,40,45,50,62]
group_B = [12, 17, 15, 13, 19, 20, 21, 18, 17, 16, 15, 14, 16, 15]

plt.title("Box plot of group A")
plt.ylabel("value")
plt.boxplot(group_A)
plt.show()
plt.title("Box plot of group B")
plt.ylabel("value")
plt.boxplot(group_B)
plt.show()

#Question 2
import numpy as np
import matplotlib.pyplot as plt

# Read the DNA sequence from the file
file1 = open("/content/s.txt", "r")
gen_seq = file1.read().strip()

# Convert the sequence into a list of bases
gen_list = list(gen_seq)
gen_len = len(gen_list)

# Generate coordinates for the helix
t = np.linspace(0, 4 * np.pi, gen_len)
x = np.cos(t)
y = np.sin(t)
z = np.linspace(0, 5, gen_len)
coordinates = np.column_stack((x, y, z))

# Map DNA bases to colors
col_map = {'A': 'red', 'T': 'blue', 'C': 'yellow', 'G': 'purple'}
colors = [col_map.get(base, 'black') for base in gen_list]  # Ensure this is a list

# Debugging: Check lengths
print("Length of gen_list:", len(gen_list))
print("Length of colors:", len(colors))

# Create the 3D plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(coordinates[:, 0], coordinates[:, 1], coordinates[:, 2], c=colors, s=50)

# Set axis labels
ax.set_xlabel("X-axis (cos(t))")
ax.set_ylabel("Y-axis (sin(t))")
ax.set_zlabel("Z-axis (linear)")

plt.show()

#Question 3
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
img=Image.open('/content/quaid.jfif')
img_array=np.array(img)
#plotting original image
plt.figure(figsize=(12,8))
plt.subplot(121)
plt.title('Original Image')
plt.imshow(img_array)
plt.show()
#rotate the image by 90 degrees
rot_img=np.rot90(img_array)
plt.subplot(2, 2, 2)
plt.imshow(rot_img)
plt.title('Rotated Image (90 degrees)')
plt.axis('off')
#flip the image
flip_img= np.fliplr(img_array)
plt.subplot(2, 2, 3)
plt.imshow(flip_img)
plt.title('Flipped Image (Horizontally)')
plt.axis('off')
if img_array.ndim == 3:
    grayscale_img = np.dot(img_array[..., :3], [0.2989, 0.5870, 0.1140])
else:
    grayscale_img = img_array


plt.subplot(2, 2, 4)
plt.imshow(grayscale_img, cmap='gray')
plt.title('Grayscale Image')
plt.axis('off')

plt.tight_layout()
plt.show()

#Question 4
from sklearn.datasets import load_iris
import numpy as np
import matplotlib.pyplot as plt

iris = load_iris()

X = np.array(iris.data)
Y = np.array(iris.target)

means=np.mean(X)
medians=np.median(X)
stdv=np.std(X,axis=0)

minim=np.min(X)
maxim=np.max(X)
sepal_data = X[:, :2]

print("Means:", means)
print("Medians:", medians)
print("Standard Deviations:", stdv)
print("Minimum Values:", minim)
print("Maximum Values:", maxim)

plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)
plt.scatter(X[:, 0], X[:, 1], c=Y, cmap='viridis', edgecolor='k')
plt.title('Sepal Length vs Sepal Width')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.colorbar(label='Species')


plt.subplot(1, 3, 2)
plt.hist(X[:, 0], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribution of Sepal Length')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Frequency')


plt.subplot(1, 3, 3)
plt.plot(X[:, 2], X[:, 3], 'o-', color='orange')
plt.title('Petal Length vs Petal Width')
plt.xlabel('Petal Length (cm)')
plt.ylabel('Petal Width (cm)')
plt.tight_layout()
plt.show()
# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mB9ryQlYYH8nLXqZRGZZHHWTF-k1BLSo
"""

#question1
import matplotlib.pyplot as plt

# Data for the groups
group_A = [12, 15, 14, 13, 16, 18, 19, 15, 14, 20, 17, 14, 15, 40, 45, 50, 62]
group_B = [12, 17, 15, 13, 19, 20, 21, 18, 17, 16, 15, 14, 16, 15]


# Box plot for group A
plt.boxplot(group_A)
plt.title('Box Plot of Group A')
plt.ylabel('Values')
plt.xlabel(['Group A'])
plt.show(group_A)

# Box plot for group B
plt.boxplot(group_B)
plt.title('Box Plot of Group B')
plt.ylabel('Values')
plt.xlabel(['Group B'])
plt.show(group_B)

# Show the plots
plt.tight_layout()

#question2
import numpy as np
import matplotlib.pyplot as plt


with open('/content/helical.txt', 'r') as file:
    genome_sequence = file.read().strip()


genome_list = list(genome_sequence)
genome_length = len(genome_list)


t = np.linspace(0, 4 * np.pi, genome_length)
x = np.cos(t)
y = np.sin(t)
z = np.linspace(0, 5, genome_length)


coordinates = np.column_stack((x, y, z))


color_map = {'A': 'red', 'T': 'blue', 'C': 'green', 'G': 'yellow'}
colors = [color_map.get(base, 'black') for base in genome_list]  # Default to black for unknown bases


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')


ax.scatter(coordinates[:, 0], coordinates[:, 1], coordinates[:, 2], c=colors, s=50)


ax.set_xlabel('X-axis (cos(t))')
ax.set_ylabel('Y-axis (sin(t))')
ax.set_zlabel('Z-axis (linear)')
ax.set_title('3D Helix Structure of Genome Sequence')

plt.show()

#question3
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
img=Image.open('/content/download.jfif')
img_array=np.array(img)
#plotting original image
plt.figure(figsize=(12,8))
plt.subplot(2,2,1)
plt.title('Original Image')
plt.imshow(img_array)
plt.show()
#rotate the image by 90 degrees
rot_img=np.rot90(img_array)
plt.subplot(2, 2, 2)
plt.imshow(rot_img)
plt.title('Rotated Image (90 degrees)')
plt.axis('off')
#flip the image
flip_img= np.fliplr(img_array)
plt.subplot(2, 2, 3)
plt.imshow(flip_img)
plt.title('Flipped Image (Horizontally)')
plt.axis('off')
if img_array.ndim == 3:  # Check if the image is colored (RGB)
    grayscale_img = np.dot(img_array[..., :3], [0.2989, 0.5870, 0.1140])  # Apply grayscale formula
else:
    grayscale_img = img_array  # If already grayscale

# Step 9: Plot the grayscale image
plt.subplot(2, 2, 4)
plt.imshow(grayscale_img, cmap='gray')
plt.title('Grayscale Image')
plt.axis('off')

# Show all plots
plt.tight_layout()
plt.show()

#question4
from sklearn.datasets import load_iris
import numpy as np
import matplotlib.pyplot as plt
# Load the Iris dataset
iris = load_iris()
# Accessing the features (data) using NumPy array
X = np.array(iris.data) # (Features (sepal length, sepal width, petal length, petalwidth) #Accessing the target labels (species)
Y = np.array(iris.target) # Target variable (species: 0 for setosa, 1 for versicolor, 2for virginica)
#calculation of mean,median and sdv
means=np.mean(X,axis=0)
medians=np.median(X,axis=0)
stdv=np.std(X,axis=0)
#min and max values
minim=np.min(X,axis=0)
maxim=np.max(X,axis=0)
sepal_data = X[:, :2]
# Print the calculated statistics
print("Means:", means)
print("Medians:", medians)
print("Standard Deviations:", stdv)
print("Minimum Values:", minim)
print("Maximum Values:", maxim)

plt.figure(figsize=(15, 5))

# Scatter plot of sepal length vs sepal width
plt.subplot(1, 3, 1)
plt.scatter(X[:, 0], X[:, 1], c=Y, cmap='viridis', edgecolor='k')
plt.title('Sepal Length vs Sepal Width')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Sepal Width (cm)')
plt.colorbar(label='Species')

# Histogram showing the distribution of sepal length
plt.subplot(1, 3, 2)
plt.hist(X[:, 0], bins=20, color='skyblue', edgecolor='black')
plt.title('Distribution of Sepal Length')
plt.xlabel('Sepal Length (cm)')
plt.ylabel('Frequency')

# Line plot to visualize the relationship between petal length and petal width
plt.subplot(1, 3, 3)
plt.plot(X[:, 2], X[:, 3], 'o-', color='orange')
plt.title('Petal Length vs Petal Width')
plt.xlabel('Petal Length (cm)')
plt.ylabel('Petal Width (cm)')
plt.tight_layout()
plt.show()